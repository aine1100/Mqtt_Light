<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Smart Light Control</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.3.7/mqtt.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    body {
      min-height: 100vh;
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(to bottom right, #f8fafc, #e2e8f0);
      color: #1f2937;
      padding: 1rem;
    }

    .container {
      background-color: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(12px);
      border-radius: 1rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      max-width: 28rem;
      width: 100%;
      border: 1px solid rgba(203, 213, 225, 0.5);
      transition: all 0.3s ease;
    }

    .container:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    h1 {
      font-size: 1.875rem;
      font-weight: 700;
      margin-bottom: 2rem;
      text-align: center;
      background: linear-gradient(to right, #3b82f6, #8b5cf6);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
    }

    .light-bulb {
      position: relative;
      width: 8rem;
      height: 8rem;
      margin: 0 auto 2rem;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.5s ease;
      background-color: #e2e8f0;
    }

    .light-bulb.active {
      background-color: #fef08a;
    }

    .light-glow {
      position: absolute;
      inset: 0;
      border-radius: 50%;
      transition: all 0.5s ease;
      filter: blur(1rem);
    }

    .light-bulb.active .light-glow {
      background-color: rgba(254, 240, 138, 0.5);
      animation: glowEffect 2s infinite;
    }

    @keyframes glowEffect {
      0% { opacity: 0.5; }
      50% { opacity: 0.8; }
      100% { opacity: 0.5; }
    }

    .light-icon {
      position: relative;
      z-index: 10;
      width: 4rem;
      height: 4rem;
    }

    .button-container {
      display: flex;
      gap: 1rem;
      justify-content: center;
      margin-bottom: 1.5rem;
    }

    button {
      padding: 0.75rem 1.5rem;
      border-radius: 9999px;
      font-weight: 500;
      border: none;
      color: white;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    button:disabled {
      opacity: 0.5;
      pointer-events: none;
    }

    #activateButton {
      background: linear-gradient(to right, #22c55e, #16a34a);
    }

    #activateButton:hover:not(:disabled) {
      transform: scale(1.05);
      box-shadow: 0 5px 15px rgba(22, 163, 74, 0.3);
    }

    #deactivateButton {
      background: linear-gradient(to right, #ef4444, #dc2626);
    }

    #deactivateButton:hover:not(:disabled) {
      transform: scale(1.05);
      box-shadow: 0 5px 15px rgba(239, 68, 68, 0.3);
    }

    #connectionStatus {
      display: flex;
      align-items: center;
      padding: 1rem;
      border-radius: 0.75rem;
      background-color: rgba(241, 245, 249, 0.8);
      border-left-width: 4px;
      transition: all 0.3s ease;
    }

    #connectionStatus.status-active {
      border-left-color: #22c55e;
    }

    #connectionStatus.status-error {
      border-left-color: #ef4444;
    }

    #connectionStatus.status-processing {
      border-left-color: #f59e0b;
      animation: glowEffect 1s infinite;
    }

    .status-icon {
      margin-right: 0.75rem;
      width: 1.25rem;
      height: 1.25rem;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.25rem;
    }

    .broker-info {
      margin-top: 1.5rem;
      font-size: 0.75rem;
      color: #64748b;
      text-align: center;
    }

    .broker-info a {
      color: #3b82f6;
      text-decoration: none;
    }

    .broker-info a:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Smart Light Control</h1>
    
    <div id="lightIndicator" class="light-bulb">
      <div class="light-glow"></div>
      <svg class="light-icon" id="bulbIcon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" stroke="#64748b"></path>
      </svg>
    </div>
    
    <div class="button-container">
      <button id="activateButton" disabled>ON</button>
      <button id="deactivateButton" disabled>OFF</button>
    </div>
    
    <div id="connectionStatus" class="status-error">
      <div class="status-icon">ðŸ”´</div>
      <div>Status: Connecting to MQTT broker...</div>
    </div>

    <div class="broker-info">
      Connected to <a href="https://broker.emqx.io" target="_blank">broker.emqx.io</a> | Topic: /student_group/light_control
    </div>
  </div>

  <script>
    const BROKER_HOST = "broker.emqx.io";
    const BROKER_PORT = 8083;
    const CLIENT_ID = "web_client_" + Math.random().toString(16).substr(2, 8);
    const CONTROL_TOPIC = "/student_group/light_control";

    const elements = {
      bulb: document.getElementById("lightIndicator"),
      icon: document.getElementById("bulbIcon"),
      status: document.getElementById("connectionStatus"),
      activateBtn: document.getElementById("activateButton"),
      deactivateBtn: document.getElementById("deactivateButton"),
      statusIcon: document.querySelector(".status-icon")
    };

    const bulbIcons = {
      active: `<circle cx="12" cy="12" r="5" stroke="#b45309" fill="#fef08a"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>`,
      inactive: `<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" stroke="#64748b"></path>`
    };

    const mqttClient = mqtt.connect(`ws://${BROKER_HOST}:${BROKER_PORT}/mqtt`, {
      clientId: CLIENT_ID,
    });

    mqttClient.on("connect", handleConnection);
    mqttClient.on("error", handleError);
    mqttClient.on("disconnect", handleDisconnect);

    function handleConnection() {
      displayStatus("Connected to MQTT broker", "active");
      toggleButtons(true);
    }

    function handleError(error) {
      displayStatus("Connection error", "error");
      toggleButtons(false);
      console.error("Connection error:", error);
    }

    function handleDisconnect() {
      displayStatus("Disconnected from MQTT broker", "error");
      toggleButtons(false);
    }

    function displayStatus(message, state) {
      elements.status.innerHTML = `<div class="status-icon">${getStatusSymbol(state)}</div><div>Status: ${message}</div>`;
      elements.status.className = `status-${state}`;
      
      if (state === "error" || (state === "active" && !elements.bulb.classList.contains("active"))) {
        elements.icon.innerHTML = bulbIcons.inactive;
      }
    }

    function getStatusSymbol(state) {
      const symbols = {
        active: "ðŸŸ¢",
        error: "ðŸ”´",
        processing: "ðŸŸ¡",
        default: "âšª"
      };
      return symbols[state] || symbols.default;
    }

    function toggleButtons(enable) {
      elements.activateBtn.disabled = !enable;
      elements.deactivateBtn.disabled = !enable;
    }

    function transmitCommand(command) {
      displayStatus("Sending command...", "processing");
      mqttClient.publish(CONTROL_TOPIC, command, {}, (error) => {
        if (error) {
          displayStatus("Failed to send command", "error");
        } else {
          displayStatus(`Light is ${command === "ON" ? "ON" : "OFF"}`, "active");
          if (command === "ON") {
            elements.bulb.classList.add("active");
            elements.icon.innerHTML = bulbIcons.active;
            elements.activateBtn.disabled = true;
            elements.deactivateBtn.disabled = false;
          } else {
            elements.bulb.classList.remove("active");
            elements.icon.innerHTML = bulbIcons.inactive;
            elements.activateBtn.disabled = false;
            elements.deactivateBtn.disabled = true;
          }
        }
      });
    }

    elements.activateBtn.addEventListener("click", () => transmitCommand("ON"));
    elements.deactivateBtn.addEventListener("click", () => transmitCommand("OFF"));
  </script>
</body>
</html>